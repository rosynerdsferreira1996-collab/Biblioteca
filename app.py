from tads.biblioteca import *
import streamlit as st
import pandas as pd
import time
from tads.biblioteca import  (
    inicializar_biblioteca, inicializar_fila, inicializar_pilha,
    atualizar_status, atualizar_contadores_gerais, bubble_sort
)

# ---------- INICIALIZA√á√ÉO ----------
if "livros" not in st.session_state:
    st.session_state.livros = inicializar_biblioteca()

if "fila_emprestimos" not in st.session_state:
    st.session_state.fila_emprestimos = inicializar_fila()

if "pilha_devolucoes" not in st.session_state:
    st.session_state.pilha_devolucoes = inicializar_pilha()

# ---------- FUN√á√ïES VISUAIS ----------
def mostrar_tabela(livros):
    df = pd.DataFrame(livros)
    df.index = range(1, len(df) + 1)
    st.dataframe(df.style.set_properties(**{'text-align': 'center'}))

def separar():
    st.markdown("---")

# ---------- INTERFACE ----------
st.markdown("<h1 style='text-align: center; color: purple;'> Biblioteca - NESNAP/UEA üìö</h1>", unsafe_allow_html=True)
st.sidebar.markdown("### üõ† Menu")

menu = st.sidebar.selectbox("Escolha uma op√ß√£o", [
    "üìñ Ver Livros",
    "üì• Empr√©stimo/Devolu√ß√£o",
    "‚ûï Cadastrar Livro",
    "‚úèÔ∏è Editar Cadastro",
    "üóëÔ∏è Remover Livro",
    "üìä Estat√≠sticas"
])


# ---------- VER LIVROS ----------
if menu == "üìñ Ver Livros":
    st.header("üìö Lista de Livros")

    total, emprestados, disponiveis = atualizar_contadores_gerais(st.session_state.livros)
    st.info(f"**Total de exemplares:** {total} | **Emprestados:** {emprestados} | **Dispon√≠veis:** {disponiveis}")

    # üîç Buscar Livro
    st.subheader("üîç Buscar Livro")
    busca = st.text_input("Digite t√≠tulo ou autor")
    filtro_genero = st.selectbox("Filtrar por g√™nero", ["Todos"] + list(set([l["G√™nero"] for l in st.session_state.livros])))

    # üî† Ordenar
    criterio = st.selectbox("Ordenar por:", ["T√≠tulo", "Autor", "G√™nero"])
    if st.button("üîÉ Ordenar"):
        bubble_sort(st.session_state.livros, criterio)
        st.success(f"‚úÖ Livros ordenados por {criterio.lower()}!")

    # Filtragem e busca
    resultados = [
        l for l in st.session_state.livros
        if (busca.lower() in l["T√≠tulo"].lower() or busca.lower() in l["Autor"].lower())
        and (filtro_genero == "Todos" or l["G√™nero"] == filtro_genero)
    ]

    if busca and not resultados:
        st.warning("‚ö†Ô∏è Nenhum livro encontrado com esse termo de busca.")
    else:
        mostrar_tabela(resultados if resultados else st.session_state.livros)

# ---------- EMPR√âSTIMO / DEVOLU√á√ÉO ----------


elif menu == "üì• Empr√©stimo/Devolu√ß√£o":
    st.header("üì§ Empr√©stimo de Livro")
    disponiveis = [l for l in st.session_state.livros if l["Dispon√≠veis"] > 0]

    if disponiveis:
        livro_emprestar = st.selectbox(
            "Escolha o livro para emprestar",
            [l["T√≠tulo"] for l in disponiveis]
        )
        aluno = st.text_input("Nome do aluno")

        if st.button("üì• Emprestar"):
            if not aluno:
                st.warning("‚ö†Ô∏è Digite o nome do aluno antes de realizar o empr√©stimo!")
            else:
                for l in st.session_state.livros:
                    if l["T√≠tulo"] == livro_emprestar:
                        l["Emprestados"] += 1
                        l["Dispon√≠veis"] -= 1
                        atualizar_status(l)
                        st.session_state.fila_emprestimos.append(
                            {"Aluno": aluno, "Livro": l["T√≠tulo"]}
                        )

                        # üîî Cria espa√ßo para mensagem tempor√°ria
                        msg = st.empty()
                        msg.success(f"‚úÖ Livro '{l['T√≠tulo']}' emprestado para {aluno}!")
                        st.info(f"üìò Agora restam {l['Dispon√≠veis']} dispon√≠veis.")
                        time.sleep(3)  # fica 3 segundos na tela
                        msg.empty()    # limpa a mensagem
    else:
        st.info("üì≠ Nenhum exemplar dispon√≠vel para empr√©stimo.")

    separar()

    # Devolu√ß√£o
    st.header("üì• Devolu√ß√£o de Livro")
    if st.session_state.fila_emprestimos:
        opcoes = [f"{f['Livro']} ‚Äî {f['Aluno']}" for f in st.session_state.fila_emprestimos]
        devolucao = st.selectbox("Selecione o livro e o aluno", opcoes)

        if st.button("üì§ Devolver"):
            livro_devolver, aluno_devolver = devolucao.split(" ‚Äî ")
            for l in st.session_state.livros:
                if l["T√≠tulo"] == livro_devolver:
                    l["Emprestados"] -= 1
                    l["Dispon√≠veis"] += 1
                    atualizar_status(l)
                    st.session_state.pilha_devolucoes.append(l["T√≠tulo"])

                    for f in list(st.session_state.fila_emprestimos):
                        if f["Livro"] == livro_devolver and f["Aluno"] == aluno_devolver:
                            st.session_state.fila_emprestimos.remove(f)
                            break
                    st.success(f"‚úÖ {aluno_devolver} devolveu o livro '{livro_devolver}' com sucesso!")
                    st.info(f"üìó O livro '{livro_devolver}' voltou para a biblioteca e agora possui {l['Dispon√≠veis']} dispon√≠veis.")
            st.rerun()
    else:
        st.info("üì≠ Nenhum livro emprestado no momento.")

# ---------- CADASTRAR LIVRO ----------
elif menu == "‚ûï Cadastrar Livro":
    st.header("üì• Cadastrar Novo Livro")
    titulo = st.text_input("T√≠tulo")
    autor = st.text_input("Autor")
    genero = st.text_input("G√™nero")
    quantidade = st.number_input("Quantidade total", min_value=1, step=1)

    if st.button("‚ûï Adicionar Livro"):
        if not titulo or not autor or not genero:
            st.warning("‚ö†Ô∏è Preencha todos os campos antes de adicionar o livro!")
        else:
            novo = {
                "T√≠tulo": titulo,
                "Autor": autor,
                "G√™nero": genero,
                "Quantidade Total": quantidade,
                "Emprestados": 0,
                "Dispon√≠veis": quantidade,
                "Status": "Dispon√≠vel"
            }
            st.session_state.livros.append(novo)
            st.success(f"üìö Livro '{titulo}' adicionado √† biblioteca com {quantidade} exemplares!")
            st.rerun()

# ---------- EDITAR LIVRO ----------
elif menu == "‚úèÔ∏è Editar Cadastro":
    st.header("‚úèÔ∏è Editar Cadastro")
    if st.session_state.livros:
        livro_editar = st.selectbox("Selecione o livro para editar", [l["T√≠tulo"] for l in st.session_state.livros])
        livro = next(l for l in st.session_state.livros if l["T√≠tulo"] == livro_editar)

        novo_titulo = st.text_input("Novo T√≠tulo", value=livro["T√≠tulo"])
        novo_autor = st.text_input("Novo Autor", value=livro["Autor"])
        novo_genero = st.text_input("Novo G√™nero", value=livro["G√™nero"])
        nova_qtd = st.number_input("Nova Quantidade Total", min_value=livro["Emprestados"], step=1, value=livro["Quantidade Total"])

        if st.button("üíæ Salvar Altera√ß√µes"):
            dif = nova_qtd - livro["Quantidade Total"]
            livro["T√≠tulo"] = novo_titulo
            livro["Autor"] = novo_autor
            livro["G√™nero"] = novo_genero
            livro["Quantidade Total"] = nova_qtd
            livro["Dispon√≠veis"] += dif
            if livro["Dispon√≠veis"] < 0:
                livro["Dispon√≠veis"] = 0
            atualizar_status(livro)
            st.success(f"‚úÖ Altera√ß√µes salvas! O livro '{livro['T√≠tulo']}' foi atualizado com sucesso.")
            st.info("‚ÑπÔ∏è A tabela de livros foi atualizada automaticamente.")
            st.rerun()
    else:
        st.info("üìö Nenhum livro cadastrado para editar.")

# ---------- REMOVER LIVRO ----------
elif menu == "üóëÔ∏è Remover Livro":
    st.header("üóëÔ∏è Remover Livro da Biblioteca")
    if st.session_state.livros:
        livro_remover = st.selectbox("Selecione o livro para remover", [l["T√≠tulo"] for l in st.session_state.livros])
        confirmar = st.checkbox("Confirmar remo√ß√£o permanente")
        if st.button("‚ùå Remover Livro"):
            if confirmar:
                st.session_state.livros = [l for l in st.session_state.livros if l["T√≠tulo"] != livro_remover]
                st.success(f"üìï Livro '{livro_remover}' removido da biblioteca!")
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è Marque a op√ß√£o de confirma√ß√£o para remover o livro.")
    else:
        st.info("üìö Nenhum livro cadastrado na biblioteca.")

# ---------- ESTAT√çSTICAS ----------
elif menu == "üìä Estat√≠sticas":
    st.header("üìä Estat√≠sticas da Biblioteca")
    total, emprestados, disponiveis = atualizar_contadores_gerais(st.session_state.livros)
    st.metric("üìö Total de Exemplares", total)
    st.metric("üìï Emprestados", emprestados)
    st.metric("üìó Dispon√≠veis", disponiveis)

    df = pd.DataFrame(st.session_state.livros)
    top_emprestados = df.sort_values(by="Emprestados", ascending=False).head(5)
    st.subheader("üèÜ Top 5 Livros Mais Emprestados")
    st.bar_chart(top_emprestados.set_index("T√≠tulo")["Emprestados"])