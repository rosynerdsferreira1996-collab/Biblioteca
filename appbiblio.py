import streamlit as st
import pandas as pd
from collections import deque

# ---------- INICIALIZA√á√ÉO ----------
if "livros" not in st.session_state:  
    st.session_state.livros = [
        {"T√≠tulo": "Fundamentos de Python üêç", "Autor": "Jo√£o Silva", "G√™nero": "Tecnologia",
         "Quantidade Total": 5, "Emprestados": 0, "Dispon√≠veis": 5, "Status": "Dispon√≠vel"},
        {"T√≠tulo": "Algoritmos e Estruturas ‚öôÔ∏è", "Autor": "Maria Souza", "G√™nero": "Tecnologia",
         "Quantidade Total": 3, "Emprestados": 0, "Dispon√≠veis": 3, "Status": "Dispon√≠vel"},
        {"T√≠tulo": "Hist√≥ria do Amazonas üå≥", "Autor": "Carlos Lima", "G√™nero": "Hist√≥ria",
         "Quantidade Total": 4, "Emprestados": 0, "Dispon√≠veis": 4, "Status": "Dispon√≠vel"},
        {"T√≠tulo": "Romance Amaz√¥nico ‚ù§Ô∏è", "Autor": "Ana Pereira", "G√™nero": "Romance",
         "Quantidade Total": 2, "Emprestados": 0, "Dispon√≠veis": 2, "Status": "Dispon√≠vel"},
    ]

if "fila_emprestimos" not in st.session_state:
    st.session_state.fila_emprestimos = deque()

if "pilha_devolucoes" not in st.session_state:
    st.session_state.pilha_devolucoes = []

# ---------- FUN√á√ïES ----------
def bubble_sort(livros, chave):
    n = len(livros)
    for i in range(n):
        for j in range(0, n - i - 1):
            if livros[j][chave] > livros[j + 1][chave]:
                livros[j], livros[j + 1] = livros[j + 1], livros[j]
    return livros

def mostrar_tabela(livros):
    df = pd.DataFrame(livros)
    df.index = range(1, len(df) + 1)
    st.dataframe(df.style.set_properties(**{'text-align': 'center'}))

def separar():
    st.markdown("---")

def atualizar_status(livro):
    livro["Status"] = "Indispon√≠vel" if livro["Dispon√≠veis"] == 0 else "Dispon√≠vel"

def atualizar_contadores_gerais():
    total = sum(l["Quantidade Total"] for l in st.session_state.livros)
    emprestados = sum(l["Emprestados"] for l in st.session_state.livros)
    disponiveis = sum(l["Dispon√≠veis"] for l in st.session_state.livros)
    return total, emprestados, disponiveis

# ---------- INTERFACE ----------
st.markdown("<h1 style='text-align: center; color: purple;'> Biblioteca - UEA üìö</h1>", unsafe_allow_html=True)
st.sidebar.markdown("### üõ† Menu")

menu = st.sidebar.selectbox("Escolha uma op√ß√£o", [
    "üìñ Ver Livros",
    "üì• Empr√©stimo/Devolu√ß√£o",
    "‚ûï Cadastrar Livro",
    "‚úèÔ∏è Editar Livro",
    "üóëÔ∏è Remover Livro",
    "üìä Estat√≠sticas"
])

# ---------- VER LIVROS ----------
if menu == "üìñ Ver Livros":
    st.header("üìö Lista de Livros")

    total, emprestados, disponiveis = atualizar_contadores_gerais()
    st.info(f"**Total de exemplares:** {total} | **Emprestados:** {emprestados} | **Dispon√≠veis:** {disponiveis}")

    # üîç Buscar Livro
    st.subheader("üîç Buscar Livro")
    busca = st.text_input("Digite t√≠tulo ou autor")
    filtro_genero = st.selectbox("Filtrar por g√™nero", ["Todos"] + list(set([l["G√™nero"] for l in st.session_state.livros])))

    # üî† Ordenar
    criterio = st.selectbox("Ordenar por:", ["T√≠tulo", "Autor", "G√™nero"])
    if st.button("üîÉ Ordenar"):
        bubble_sort(st.session_state.livros, criterio)
        st.success(f"‚úÖ Livros ordenados por {criterio.lower()}!")

    # Filtragem e busca
    resultados = [
        l for l in st.session_state.livros
        if (busca.lower() in l["T√≠tulo"].lower() or busca.lower() in l["Autor"].lower())
        and (filtro_genero == "Todos" or l["G√™nero"] == filtro_genero)
    ]

    if busca and not resultados:
        st.warning("‚ö†Ô∏è Nenhum livro encontrado com esse termo de busca.")
    else:
        mostrar_tabela(resultados if resultados else st.session_state.livros)

# ---------- EMPR√âSTIMO / DEVOLU√á√ÉO ----------
elif menu == "üì• Empr√©stimo/Devolu√ß√£o":
    st.header("üì§ Empr√©stimo de Livro")
    disponiveis = [l for l in st.session_state.livros if l["Dispon√≠veis"] > 0]

    if disponiveis:
        livro_emprestar = st.selectbox("Escolha o livro para emprestar", [l["T√≠tulo"] for l in disponiveis])
        aluno = st.text_input("Nome do aluno")
        if st.button("üì• Emprestar"):
            if not aluno:
                st.warning("‚ö†Ô∏è Digite o nome do aluno antes de realizar o empr√©stimo!")
            else:
                for l in st.session_state.livros:
                    if l["T√≠tulo"] == livro_emprestar:
                        l["Emprestados"] += 1
                        l["Dispon√≠veis"] -= 1
                        atualizar_status(l)
                        st.session_state.fila_emprestimos.append({"Aluno": aluno, "Livro": l["T√≠tulo"]})
                        st.success(f"‚úÖ Livro '{l['T√≠tulo']}' emprestado para {aluno}!")
                        st.info(f"üìò O livro '{l['T√≠tulo']}' foi emprestado com sucesso e agora possui {l['Dispon√≠veis']} dispon√≠veis.")
                st.rerun()
    else:
        st.info("üì≠ Nenhum exemplar dispon√≠vel para empr√©stimo.")

    separar()

    # Devolu√ß√£o
    st.header("üì• Devolu√ß√£o de Livro")
    if st.session_state.fila_emprestimos:
        opcoes = [f"{f['Livro']} ‚Äî {f['Aluno']}" for f in st.session_state.fila_emprestimos]
        devolucao = st.selectbox("Selecione o livro e o aluno", opcoes)

        if st.button("üì§ Devolver"):
            livro_devolver, aluno_devolver = devolucao.split(" ‚Äî ")
            for l in st.session_state.livros:
                if l["T√≠tulo"] == livro_devolver:
                    l["Emprestados"] -= 1
                    l["Dispon√≠veis"] += 1
                    atualizar_status(l)
                    st.session_state.pilha_devolucoes.append(l["T√≠tulo"])

                    for f in list(st.session_state.fila_emprestimos):
                        if f["Livro"] == livro_devolver and f["Aluno"] == aluno_devolver:
                            st.session_state.fila_emprestimos.remove(f)
                            break
                    st.success(f"‚úÖ {aluno_devolver} devolveu o livro '{livro_devolver}' com sucesso!")
                    st.info(f"üìó O livro '{livro_devolver}' voltou para a biblioteca e agora possui {l['Dispon√≠veis']} dispon√≠veis.")
            st.rerun()
    else:
        st.info("üì≠ Nenhum livro emprestado no momento.")

# ---------- CADASTRAR, EDITAR, REMOVER, ESTAT√çSTICAS ----------
# (mant√©m igual ao seu √∫ltimo c√≥digo, sem altera√ß√µes nessas partes)

